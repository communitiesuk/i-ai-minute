# Minimal .env configuration for local development
# Copy this to .env and configure with your API keys

#=======================================
# CORE APPLICATION SETTINGS (Required)
#=======================================
ENVIRONMENT=local
APP_URL=http://localhost:3000
BACKEND_HOST=http://localhost:8080

# Database (Using Docker Compose defaults)
POSTGRES_HOST=localhost
POSTGRES_PORT=5432
POSTGRES_DB=minute_db
POSTGRES_USER=postgres
POSTGRES_PASSWORD=insecure

# Queue configuration (Using LocalStack)
QUEUE_NAME=minute-transcription-queue
DEADLETTER_QUEUE_NAME=minute-transcription-queue-deadletter
QUEUE_SERVICE_NAME=sqs
USE_LOCALSTACK=true
LOCALSTACK_URL=http://localhost:4566

# Storage (Using LocalStack S3)
STORAGE_SERVICE_NAME=s3
DATA_S3_BUCKET=minute-local-bucket

# Auth (Local development only)
REPO=minute
DISABLE_AUTH_SIGNATURE_VERIFICATION=true

# Optional services (set empty to disable)
SENTRY_DSN=
POSTHOG_API_KEY=

#=======================================
# AI SERVICES (Choose ONE transcription + ONE LLM option)
#=======================================

# OPTION 1A: Azure Speech-to-Text for Transcription
TRANSCRIPTION_SERVICES=["azure_stt_synchronous"]
AZURE_SPEECH_KEY=your_azure_speech_key_here
AZURE_SPEECH_REGION=your_azure_region_here

# OPTION 1B: AWS Transcribe (Alternative to Azure)
# TRANSCRIPTION_SERVICES=["aws_transcribe"]
# AWS_ACCOUNT_ID=your_aws_account_id
# AWS_REGION=eu-west-2
# AWS_ACCESS_KEY_ID=your_aws_access_key
# AWS_SECRET_ACCESS_KEY=your_aws_secret_key

# OPTION 2A: Google Gemini for LLM (Recommended)
LLM_PROVIDER=gemini
LLM_MODEL_NAME=gemini-2.0-flash
GOOGLE_CLOUD_PROJECT=your_google_project_id
GOOGLE_CLOUD_LOCATION=your_google_region
# Set GOOGLE_APPLICATION_CREDENTIALS to path of your service account JSON file

# OPTION 2B: Azure OpenAI (Alternative to Gemini)
# LLM_PROVIDER=openai
# LLM_MODEL_NAME=gpt-4
# AZURE_OPENAI_API_KEY=your_azure_openai_key
# AZURE_OPENAI_ENDPOINT=your_azure_openai_endpoint
# AZURE_DEPLOYMENT=your_deployment_name
# AZURE_OPENAI_API_VERSION=2024-10-21